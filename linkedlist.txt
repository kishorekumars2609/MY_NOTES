
linked list 


Node structure
struct Node {
    int data;
    Node* next;
    
    Node(int value) : data(value), next(nullptr) {}
};

// LinkedList class
class LinkedList {
private:
    Node* head;

public:
    // Constructor
    LinkedList() : head(nullptr) {}

    // Function to insert a new node at the beginning
    void insertAtBeginning(int value) {
        Node* newNode = new Node(value);
        newNode->next = head;
        head = newNode;
    }

    // Function to insert a new node at the end
    void insertAtEnd(int value) {
        Node* newNode = new Node(value);
        if (head == nullptr) {
            head = newNode;
            return;
        }
        Node* temp = head;
        while (temp->next != nullptr) {
            temp = temp->next;
        }
        temp->next = newNode;
    }

    // Function to insert a new node at a specific position
    void insertAtPosition(int value, int position) {
        Node* newNode = new Node(value);
        if (position == 0) {
            newNode->next = head;
            head = newNode;
            return;
        }
        Node* temp = head;
        for (int i = 0; i < position - 1 && temp != nullptr; ++i) {
            temp = temp->next;
        }
        if (temp == nullptr) {
            cerr << "Invalid position for insertion." << endl;
            return;
        }
        newNode->next = temp->next;
        temp->next = newNode;
    }

    // Function to delete a node at the beginning
    void deleteAtBeginning() {
        if (head == nullptr) {
            cerr << "List is empty. Cannot delete." << endl;
            return;
        }
        Node* temp = head;
        head = head->next;
        delete temp;
    }

    // Function to delete a node at the end
    void deleteAtEnd() {
        if (head == nullptr) {
            cerr << "List is empty. Cannot delete." << endl;
            return;
        }
        if (head->next == nullptr) {
            delete head;
            head = nullptr;
            return;
        }
        Node* temp = head;
        while (temp->next->next != nullptr) {
            temp = temp->next;
        }
        delete temp->next;
        temp->next = nullptr;
    }

    // Function to delete a node at a specific position
    void deleteAtPosition(int position) {
        if (head == nullptr) {
            cerr << "List is empty. Cannot delete." << endl;
            return;
        }
        if (position == 0) {
            Node* temp = head;
            head = head->next;
            delete temp;
            return;
        }
        Node* temp = head;
        for (int i = 0; i < position - 1 && temp != nullptr; ++i) {
            temp = temp->next;
        }
        if (temp == nullptr || temp->next == nullptr) {
            cerr << "Invalid position for deletion." << endl;
            return;
        }
        Node* nodeToDelete = temp->next;
        temp->next = temp->next->next;
        delete nodeToDelete;
    }

    // Function to display the linked list
    void display() {
        Node* temp = head;
        while (temp != nullptr) {
            cout << temp->data << " ";
            temp = temp->next;
        }
        cout << endl;
    }
};

int main() {
    LinkedList linkedList;

    // Insert at the beginning
    linkedList.insertAtBeginning(10);
    linkedList.insertAtBeginning(5);

    // Insert at the end
    linkedList.insertAtEnd(20);

    // Insert at a specific position
    linkedList.insertAtPosition(15, 2);

    // Display the linked list
    cout << "Linked List: ";
    linkedList.display();

    // Delete at the beginning
    linkedList.deleteAtBeginning();

    // Delete at the end
    linkedList.deleteAtEnd();

    // Delete at a specific position
    linkedList.deleteAtPosition(1);

    // Display the modified linked list
    cout << "Modified Linked List: ";
    linkedList.display();

    return 0;
}
